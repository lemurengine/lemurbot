/*! AdminLTE app.js *================* Main JS application file for AdminLTE v2. This file * should be included in all pages. It controls some layout * options and implements exclusive AdminLTE plugins. * * @Author Almsaeed Studio * @Support <https://www.almsaeedstudio.com> * @Email <abdullah@almsaeedstudio.com> * @version 2.4.2 * @repository git://github.com/almasaeed2010/AdminLTE.git * @license MIT <http://opensource.org/licenses/MIT> */ if (
    "undefined" == typeof jQuery
)
    throw new Error("AdminLTE requires jQuery");
    (function (a) {
        "use strict";
        function b(b) {
            return this.each(function () {
                var d = a(this),
                    e = d.data(c);
                e || d.data(c, (e = new f(d))), "string" == typeof b && e.toggle(d);
            });
        }
        var c = "lte.directchat",
            d = { data: '[data-widget="chat-pane-toggle"]', box: ".direct-chat" },
            e = { open: "direct-chat-contacts-open" },
            f = function (a) {
                this.element = a;
            };
        f.prototype.toggle = function (a) {
            a.parents(d.box).first().toggleClass(e.open);
        };
        var g = a.fn.directChat;
        (a.fn.directChat = b),
            (a.fn.directChat.Constructor = f),
            (a.fn.directChat.noConflict = function () {
                return (a.fn.directChat = g), this;
            }),
            a(document).on("click", d.data, function (c) {
                c && c.preventDefault(), b.call(a(this), "toggle");
            });
    })(jQuery),
    (function (a) {
        "use strict";
        function b(b) {
            return this.each(function () {
                var e = a(this);
                if (!e.data(c)) {
                    var f = a.extend({}, d, e.data(), "object" == typeof b && b);
                    e.data(c, new h(e, f));
                }
            });
        }
        var c = "lte.tree",
            d = { animationSpeed: 500, accordion: !0, followLink: !1, trigger: ".treeview a" },
            e = { tree: ".tree", treeview: ".treeview", treeviewMenu: ".treeview-menu", open: ".menu-open, .active", li: "li", data: '[data-widget="tree"]', active: ".active" },
            f = { open: "menu-open", tree: "tree" },
            g = { collapsed: "collapsed.tree", expanded: "expanded.tree" },
            h = function (b, c) {
                (this.element = b), (this.options = c), a(this.element).addClass(f.tree), a(e.treeview + e.active, this.element).addClass(f.open), this._setUpListeners();
            };
        (h.prototype.toggle = function (a, b) {
            var c = a.next(e.treeviewMenu),
                d = a.parent(),
                g = d.hasClass(f.open);
            d.is(e.treeview) && ((this.options.followLink && "#" !== a.attr("href")) || b.preventDefault(), g ? this.collapse(c, d) : this.expand(c, d));
        }),
            (h.prototype.expand = function (b, c) {
                var d = a.Event(g.expanded);
                if (this.options.accordion) {
                    var h = c.siblings(e.open),
                        i = h.children(e.treeviewMenu);
                    this.collapse(i, h);
                }
                c.addClass(f.open),
                    b.slideDown(
                        this.options.animationSpeed,
                        function () {
                            a(this.element).trigger(d);
                        }.bind(this)
                    );
            }),
            (h.prototype.collapse = function (b, c) {
                var d = a.Event(g.collapsed);
                b.find(e.open).removeClass(f.open),
                    c.removeClass(f.open),
                    b.slideUp(
                        this.options.animationSpeed,
                        function () {
                            b.find(e.open + " > " + e.treeview).slideUp(), a(this.element).trigger(d);
                        }.bind(this)
                    );
            }),
            (h.prototype._setUpListeners = function () {
                var b = this;
                a(this.element).on("click", this.options.trigger, function (c) {
                    b.toggle(a(this), c);
                });
            });
        var i = a.fn.tree;
        (a.fn.tree = b),
            (a.fn.tree.Constructor = h),
            (a.fn.tree.noConflict = function () {
                return (a.fn.tree = i), this;
            }),
            a(window).on("load", function () {
                a(e.data).each(function () {
                    b.call(a(this));
                });
            });
    })(jQuery);
